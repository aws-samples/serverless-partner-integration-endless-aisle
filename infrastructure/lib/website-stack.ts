import { Construct } from 'constructs';

import { CfnOutput, Stack, StackProps } from 'aws-cdk-lib';
import { RestApi } from 'aws-cdk-lib/aws-apigateway';
import { UserPool, UserPoolClient } from 'aws-cdk-lib/aws-cognito';
import { NagSuppressions } from 'cdk-nag';
import { Website } from './constructs/website';


// Properties for the website-stack
export interface WebsiteStackProps extends StackProps {
  userPool: UserPool,
  client: UserPoolClient,
  backendApi: RestApi
}

export class WebsiteStack extends Stack {
  readonly cloudfrontURL: string;
  constructor(scope: Construct, id: string, props: WebsiteStackProps) {
    super(scope, id, props);

    const wafwebaclToCloudFrontToS3 = new Website(this, 'EndlessAisleFrontEnd', {
      env: {
        account: props.env?.account,
        region: props.env?.region
      },
      userpool: props.userPool,
      client: props.client,
      backendApi: props.backendApi,
    });
    // TODO remove unneccessary CFN OutPut
    new CfnOutput(this, "domainurl", { value: wafwebaclToCloudFrontToS3.cloudfrontURL });
    NagSuppressions.addResourceSuppressions(scope, [
      { id: 'AwsSolutions-IAM5', reason: 'Suppressing IAM5 for roles generated by solution constructs' },
      { id: 'AwsSolutions-S1', reason: 'As W35, This S3 bucket is used as the access logging bucket for CloudFront Distribution' },
      { id: 'AwsSolutions-CFR4', reason: 'Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion' },
    ], true);
  }
}
