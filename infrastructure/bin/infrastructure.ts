#!/usr/bin/env node
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
import * as cdk from 'aws-cdk-lib';
import { AwsSolutionsChecks, NagSuppressions } from 'cdk-nag';
import 'source-map-support/register';
import { InfrastructureStack } from '../lib/infrastructure-stack';
import { WebsiteStack } from '../lib/website-stack';

const app = new cdk.App();

const infra = new InfrastructureStack(app, 'InfrastructureStack', {
  env: { region: process.env.CDK_DEFAULT_REGION, account: process.env.CDK_DEFAULT_ACCOUNT },
});

new WebsiteStack(app, 'WebsiteStack', {
  userPool: infra.userPool,
  client: infra.client,
  backendApi: infra.apigw,
})



cdk.Aspects.of(app).add(new AwsSolutionsChecks({ verbose: false }))

NagSuppressions.addResourceSuppressions(app, [
  { id: 'AwsSolutions-IAM4', reason: 'Suppressing IAM4 for lambda default policy using IAM  managed policies for sample Lambda functions' },
  { id: 'AwsSolutions-IAM5', reason: 'Suppressing IAM5 for roles generated by solution constructs' },
  { id: 'AwsSolutions-S1', reason: 'Suppressing S1 as password policy is not required' },
  { id: 'AwsSolutions-L1', reason: 'AWS Cloudformation custom resource creates old version lambda' },
  { id: 'AwsSolutions-CFR4', reason: 'Suppressing CFR4 as password policy is not required' },
  { id: 'AwsSolutions-APIG2', reason: 'Suppressing CFR4 as password policy is not required' },
  { id: 'AwsSolutions-APIG6', reason: 'Skipped logging for Dummy app' },
  { id: 'AwsSolutions-APIG4', reason: 'Sample API uses IAM instead of congito' },
  { id: 'AwsSolutions-COG1', reason: 'Suppressing COG1 as password policy is not required' },
  { id: 'AwsSolutions-COG4', reason: 'Sample API uses IAM instead of congito' },
], true);